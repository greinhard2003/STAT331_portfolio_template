---
title: "STAT 331 Portfolio"
author: "Garrett Reinhard"
format: html 
embed-resources: true
layout: margin-left
editor: visual
execute: 
  eval: false
  echo: true
---

[**My Grade:**]{.underline} I believe my grade equivalent to course work evidenced below to be an \_\_.

[**Learning Objective Evidence:**]{.underline} In the code chunks below, provide code from Lab or Challenge assignments where you believe you have demonstrated proficiency with the specified learning target. Be sure to specify **where** the code came from (e.g., Lab 4 Question 2).

## Working with Data

**WD-1: I can import data from a *variety* of formats (e.g., csv, xlsx, txt, etc.).**

-   `csv` Example 1

```{r}
#| label: wd-1-csv-1
#Lab 2 - revised
surveys <- read_csv(here("Week 2", "Lab 2", "Data", "surveys.csv"))
```

-   `csv` Example 2

```{r}
#| label: wd-1-csv-2
#Code from Challenge 3
teacher_evals <- read_csv(here("Week 3", "Challenge 3", "Data", "teacher_evals.csv"))
```

-   `xlsx`

```{r}
#| label: wd-1-xlsx

```

**WD-2: I can select necessary columns from a dataset.**

-   Example selecting specified columns

```{r}
#| label: wd-2-ex-1
#Lab 3 Question 5
teacher_evals_clean <- teachers_evals |>
  rename(sex = gender) |>
  select(course_id, 
         teacher_id, 
         question_no, 
         no_participants, 
         resp_share, 
         SET_score_avg,
         percent_failed_cur, 
         academic_degree, 
         seniority, 
         sex) |>
  filter(no_participants >= 10) |>
  mutate(teacher_id = as.character(teacher_id),
         seniority = as.character(seniority))
```

-   Example removing specified columns

```{r}
#| label: wd-2-ex-2
#Lab 3 Question 5 - modified to fit requirements (even though its gross) 
teacher_evals_clean <- teachers_evals |>
  rename(sex = gender) |>
  select(-c(stud_grade_avg,
    stud_grade_std,
    stud_grade_var_coef,
    percent_failed,
    stud_grade_avg_cur,
    stud_grade_std_cur,
    stud_grade_var_coef_cur,
    class_duration,
    weekday,
    time_of_day,
    SET_score_1sem,
    maximum_score)) |>
  filter(no_participants >= 10) |>
  mutate(teacher_id = as.character(teacher_id),
         seniority = as.character(seniority))

```

-   Example selecting columns based on logical values (e.g., `starts_with()`, `ends_with()`, `contains()`, `where()`)

```{r}
#| label: wd-2-ex-3
#Lab 3 Question 8 - modified to fit requirement
teacher_evals_clean |>
  filter(if_any(everything(),  is.na)) |> #everything() checks all columns
  select(ends_with("id"), everything())
```

**WD-3: I can filter rows from a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   Numeric Example 1

```{r}
#| label: wd-3-numeric-ex-1
#Lab 4 Question 5 - revised
ca_childcare |> 
  group_by(census_region, study_year) |>
  summarise(median_mhi_2018 = median(mhi_2018),
            .groups = "drop") |>
  filter(study_year %in% c(2008, 2018)) |>
  pivot_wider(names_from = study_year,
              values_from = median_mhi_2018) |>
  rename("median_household_income_2008" = `2008`,
         "median_household_income_2018" = `2018`) |>
  arrange(desc("median_household_income_2018"))
```

-   Numeric Example 2

```{r}
#| label: wd-3-numeric-ex-2
#Lab 5 Clue #1
person |>
  left_join(y = interview,
            join_by(id == person_id)) |>
  filter((address_street_name == "Northwestern Dr" &
            address_number == max(address_number)) | #find interview for either the person in the last house on Northwestern Dr or Annabel on Franklin Ave
           (address_street_name == "Franklin Ave" &
              str_detect(name, "Annabel"))) |>
  pull(name, transcript)
```

-   Character Example 1 (any context)

```{r}
#| label: wd-3-character
#Lab 5 Clue #1
person |>
  left_join(y = interview,
            join_by(id == person_id)) |>
  filter((address_street_name == "Northwestern Dr" &
            address_number == max(address_number)) | #find interview for either the person in the last house on Northwestern Dr or Annabel on Franklin Ave
           (address_street_name == "Franklin Ave" &
              str_detect(name, "Annabel"))) |>
  pull(name, transcript)
```

-   Character Example 2 (example must use functions from **stringr**)

```{r}
#| label: wd-3-string
#Lab 5 Clue #2
get_fit_now_check_in |>
  left_join(y = get_fit_now_member,
            join_by(membership_id == id)) |>
  left_join(y = interview,
            join_by(person_id)) |>
  left_join(y = person,
            join_by(person_id == id)) |>
  left_join(y = drivers_license,
            join_by(license_id == id)) |> #All necessary data joined into one table
  mutate(check_in_date = ymd(check_in_date)) |> #convert date to a Date type
  filter(membership_status == "gold", #gold members have bags
         str_detect(membership_id, "^48Z"), #member id started with 48Z
         str_detect(plate_number, "H42W"), #license plate had H42W
         month(check_in_date, label = TRUE) == "Jan", #Was in the gym on January 9th
         day(check_in_date) == 9) |>
  pull(name.x, transcript)
```

-   Date (example must use functions from **lubridate**)

```{r}
#| label: wd-3-date
#Lab 5 Clue #2
get_fit_now_check_in |>
  left_join(y = get_fit_now_member,
            join_by(membership_id == id)) |>
  left_join(y = interview,
            join_by(person_id)) |>
  left_join(y = person,
            join_by(person_id == id)) |>
  left_join(y = drivers_license,
            join_by(license_id == id)) |> #All necessary data joined into one table
  mutate(check_in_date = ymd(check_in_date)) |> #convert date to a Date type
  filter(membership_status == "gold", #gold members have bags
         str_detect(membership_id, "^48Z"), #member id started with 48Z
         str_detect(plate_number, "H42W"), #license plate had H42W
         month(check_in_date, label = TRUE) == "Jan", #Was in the gym on January 9th
         day(check_in_date) == 9) |>
  pull(name.x, transcript)
```

**WD-4: I can modify existing variables and create new variables in a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   Numeric Example 1

```{r}
#| label: wd-4-numeric-ex-1
#Challenge 4 data selection
ca_childcare <- childcare_costs |>
  left_join(y = counties,
            join_by(county_fips_code)) |>
  left_join(y = tax_rev,
            join_by(county_name == entity_name, study_year == year)) |>
  filter(state_name == "California") |>
  mutate(median_familycare = mfcc_infant + mfcc_toddler + mfcc_preschool,
         median_centercare = mc_infant + mc_toddler + mc_preschool) |>
  group_by(study_year) |>
  summarize(median_familycare_price = median(median_familycare),
            median_centercare_price = median(median_centercare),
            .groups = "drop") |>
  pivot_longer( cols = c(median_centercare_price, median_familycare_price),
                names_to = "care_type",
                values_to = "price") |>
  mutate(care_type = case_when(care_type == "median_centercare_price" ~ "Center Care",
                   care_type == "median_familycare_price" ~ "Family Care"))
```

-   Numeric Example 2

```{r}
#| label: wd-4-numeric-ex-2
#Lab 3 Question 7 - Revised
teacher_evals_clean |>
  distinct(teacher_id, academic_degree) |>
  select(academic_degree) |>
  count(academic_degree) |>
  mutate(academic_percent = 100 * n / sum(n)) |>
  arrange(academic_percent)
```

-   Factor Example 1 (renaming levels)

```{r}
#| label: wd-4-factor-ex-1
#Lab 4 Question 7 - Revised
ca_childcare |>
  pivot_longer(
    cols = c(mc_infant, mc_toddler, mc_preschool),
    names_to = "age_group",
    values_to = "cost") |>
  mutate(
    age_group = fct(age_group, levels = c("mc_infant", "mc_toddler", "mc_preschool")),
    age_group = fct_collapse(.f = age_group,
                              "Infant" = "mc_infant",
                              "Toddler" = "mc_toddler",
                              "Preschool" = "mc_preschool"),
    census_region = fct_reorder2(
      .f = census_region,
      .x = study_year,
      .y = cost )) |>
  ggplot(mapping = aes(x = study_year,
                       y = cost, 
                       color = census_region)) +
    geom_point() +
    geom_smooth(method = "loess") +
    facet_wrap(~ age_group, ncol = 3) +
  scale_y_continuous(
      limits = c(100, 500),
      breaks = seq(100, 500, by = 100)) +
  scale_x_continuous(
    limits = c(2008, 2018),
    breaks = seq(2008, 2018, by = 2)) +
  labs(title = "Weekly Median Price for Center-Based Childcare ($)",
       x = "Study Year",
       y = NULL) +
  theme_bw() +
  theme(panel.spacing =  grid::unit(10, "pt"),
        axis.text.x = element_text(size = 6))
```

-   Factor Example 2 (reordering levels)

```{r}
#| label: wd-4-factor-ex-2
#Lab 4 Question 7 - Revised
ca_childcare |>
  pivot_longer(
    cols = c(mc_infant, mc_toddler, mc_preschool),
    names_to = "age_group",
    values_to = "cost") |>
  mutate(
    age_group = fct(age_group, levels = c("mc_infant", "mc_toddler", "mc_preschool")),
    age_group = fct_collapse(.f = age_group,
                              "Infant" = "mc_infant",
                              "Toddler" = "mc_toddler",
                              "Preschool" = "mc_preschool"),
    census_region = fct_reorder2(
      .f = census_region,
      .x = study_year,
      .y = cost )) |>
  ggplot(mapping = aes(x = study_year,
                       y = cost, 
                       color = census_region)) +
    geom_point() +
    geom_smooth(method = "loess") +
    facet_wrap(~ age_group, ncol = 3) +
  scale_y_continuous(
      limits = c(100, 500),
      breaks = seq(100, 500, by = 100)) +
  scale_x_continuous(
    limits = c(2008, 2018),
    breaks = seq(2008, 2018, by = 2)) +
  labs(title = "Weekly Median Price for Center-Based Childcare ($)",
       x = "Study Year",
       y = NULL) +
  theme_bw() +
  theme(panel.spacing =  grid::unit(10, "pt"),
        axis.text.x = element_text(size = 6))
```

-   Character (example must use functions from **stringr**)

```{r}
#| label: wd-4-string
#Lab 4
ca_childcare <- ca_childcare |> 
  mutate(county_name = str_remove(county_name, " County"),
         census_region = fct_collapse(.f = fct(county_name),
                                      `Superior California`= superior_counties,
                                      `North Coast` = north_coast_counties,
                                      `San Fransisco Bay Area` = san_fran_counties,
                                      `Northern San Joaquin Valley` = n_san_joaquin_counties,
                                      `Central Coast` = central_coast_counties,
                                      `Southern San Joaquin Valley` = s_san_joaquin_counties,
                                      `Inland Empire` = inland_counties,
                                      `Los Angeles County` = la_county,
                                      `Orange County` = orange_county,
                                      `San Diego-Imperial` = san_diego_imperial_counties))
```

-   Date (example must use functions from **lubridate**)

```{r}
#| label: wd-4-date
#Lab 5 Clue #2
get_fit_now_check_in |>
  left_join(y = get_fit_now_member,
            join_by(membership_id == id)) |>
  left_join(y = interview,
            join_by(person_id)) |>
  left_join(y = person,
            join_by(person_id == id)) |>
  left_join(y = drivers_license,
            join_by(license_id == id)) |> #All necessary data joined into one table
  mutate(check_in_date = ymd(check_in_date)) |> #convert date to a Date type
  filter(membership_status == "gold", #gold members have bags
         str_detect(membership_id, "^48Z"), #member id started with 48Z
         str_detect(plate_number, "H42W"), #license plate had H42W
         month(check_in_date, label = TRUE) == "Jan", #Was in the gym on January 9th
         day(check_in_date) == 9) |>
  pull(name.x, transcript)
```

**WD-5: I can use mutating joins to combine multiple dataframes.**

-   `left_join()` Example 1

```{r}
#| label: wd-5-left-ex-1
#Lab 5 Clue #2
get_fit_now_check_in |>
  left_join(y = get_fit_now_member,
            join_by(membership_id == id)) |>
  left_join(y = interview,
            join_by(person_id)) |>
  left_join(y = person,
            join_by(person_id == id)) |>
  left_join(y = drivers_license,
            join_by(license_id == id)) |> #All necessary data joined into one table
  mutate(check_in_date = ymd(check_in_date)) |> #convert date to a Date type
  filter(membership_status == "gold", #gold members have bags
         str_detect(membership_id, "^48Z"), #member id started with 48Z
         str_detect(plate_number, "H42W"), #license plate had H42W
         month(check_in_date, label = TRUE) == "Jan", #Was in the gym on January 9th
         day(check_in_date) == 9) |>
  pull(name.x, transcript)
```

-   `right_join()` Example 1

```{r}
#| label: wd-5-right
#Lab 5 Clue #3 - modified to fit requirement
interview |>
  right_join(person,
            join_by(person_id == id)) |>
  filter(name == "Miranda Priestly") |>
  pull(transcript) #No interview
```

-   `left_join()` **or** `right_join()` Example 2

```{r}
#| label: wd-5-left-right-ex-2
#Lab 5 Clue #1
person |>
    filter((address_street_name == "Northwestern Dr" &
            address_number == max(address_number)) | #find interview for either the person in the last house on Northwestern Dr or Annabel on Franklin Ave
           (address_street_name == "Franklin Ave" &
              str_detect(name, "Annabel"))) |>
  left_join(y = interview,
            join_by(id == person_id)) |>
  pull(name, transcript)
```

-   `inner_join()` Example 1

```{r}
#| label: wd-5-inner-ex-1
#Lab 5 Clue #1 - modified to fit requirement
person |>
    filter((address_street_name == "Northwestern Dr" &
            address_number == max(address_number)) | #find interview for either the person in the last house on Northwestern Dr or Annabel on Franklin Ave
           (address_street_name == "Franklin Ave" &
              str_detect(name, "Annabel"))) |>
  inner_join(y = interview,
            join_by(id == person_id)) |>
  pull(name, transcript)
```

-   `inner_join()` Example 2

```{r}
#| label: wd-5-inner-ex-2
#Lab 5 Clue #2 - Modified to fit requirement
get_fit_now_check_in |>
  inner_join(y = get_fit_now_member,
            join_by(membership_id == id)) |>
  inner_join(y = interview,
            join_by(person_id)) |>
  inner_join(y = person,
            join_by(person_id == id)) |>
  inner_join(y = drivers_license,
            join_by(license_id == id)) |> #All necessary data joined into one table
  mutate(check_in_date = ymd(check_in_date)) |> #convert date to a Date type
  filter(membership_status == "gold", #gold members have bags
         str_detect(membership_id, "^48Z"), #member id started with 48Z
         str_detect(plate_number, "H42W"), #license plate had H42W
         month(check_in_date, label = TRUE) == "Jan", #Was in the gym on January 9th
         day(check_in_date) == 9) |>
  pull(name.x, transcript)
```

**WD-6: I can use filtering joins to filter rows from a dataframe.**

-   `semi_join()`

```{r}
#| label: wd-6-semi
#Lab 5 Clue #3 - modified to fit requirement
interview |>
  semi_join(new_suspect,
            join_by(person_id == id)) |>
  pull(transcript) #No interview
```

-   `anti_join()`

```{r}
#| label: wd-6-anti

```

**WD-7: I can pivot dataframes from long to wide and visa versa**

-   `pivot_longer()`

```{r}
#| label: wd-7-long
#Challenge 4 data selection
ca_childcare <- childcare_costs |>
  left_join(y = counties,
            join_by(county_fips_code)) |>
  left_join(y = tax_rev,
            join_by(county_name == entity_name, study_year == year)) |>
  filter(state_name == "California") |>
  mutate(median_familycare = mfcc_infant + mfcc_toddler + mfcc_preschool,
         median_centercare = mc_infant + mc_toddler + mc_preschool) |>
  group_by(study_year) |>
  summarize(median_familycare_price = median(median_familycare),
            median_centercare_price = median(median_centercare),
            .groups = "drop") |>
  pivot_longer( cols = c(median_centercare_price, median_familycare_price),
                names_to = "care_type",
                values_to = "price") |>
  mutate(care_type = case_when(care_type == "median_centercare_price" ~ "Center Care",
                   care_type == "median_familycare_price" ~ "Family Care"))
```

-   `pivot_wider()`

```{r}
#| label: wd-7-wide
#Lab 4 Question 5 - revised
ca_childcare |> 
  group_by(census_region, study_year) |>
  summarise(median_mhi_2018 = median(mhi_2018),
            .groups = "drop") |>
  filter(study_year %in% c(2008, 2018)) |>
  pivot_wider(names_from = study_year,
              values_from = median_mhi_2018) |>
  rename("median_household_income_2008" = `2008`,
         "median_household_income_2018" = `2018`) |>
  arrange(desc("median_household_income_2018"))
```

## Reproducibility

**R-1: I can create professional looking, reproducible analyses using RStudio projects, Quarto documents, and the here package.**

The following assignments satisfy the above criteria:

-   Lab 5
-   Challenge 4
-   Lab 4
-   Lab 3
-   Challenge 3

**R-2: I can write well documented and tidy code.**

-   Example of **ggplot2** plotting

```{r}
#| label: r-2-1
#Challenge 4 - Revised
ca_childcare |>
  ggplot(mapping = aes(x = study_year,
                       y = price)) +
  geom_point(show.legend = FALSE) +
  geom_smooth(method = "lm",
              fill = "dodgerblue3",
              show.legend = FALSE,
              color = "coral2") +
  facet_wrap(~ care_type, ncol = 2) +
  scale_x_continuous(limits = c(2008, 2018),
                     breaks = seq(2008, 2018, by = 2)) +
  labs(x = "Study Year",
       y = NULL,
       subtitle = "Median Price of Childcare",
       title = "Median Weekly Price of Family Childcare vs. Center-based Childcare in CA") +
  theme_bw() +
  theme(panel.grid.major = element_line(color = "gray45"),
        panel.grid.minor = element_line(color = "gray70"),
        panel.background = element_rect(fill = "lightsteelblue2"),
        strip.background = element_rect(fill = "pink"))
```

-   Example of **dplyr** pipeline

```{r}
#| label: r-2-2
#Lab 5 Clue #3
person |> 
  left_join(y = drivers_license,
            join_by(license_id == id)) |>
  left_join(y = income,
            join_by(ssn)) |>
  left_join(y = facebook_event_checkin, 
            join_by(id == person_id)) |> #combined necessary data into one table
  mutate(date = ymd(date)) |> #Convert date to a date type
  filter(gender == "female", #employer is female
         hair_color == "red", # red hair
         car_make == "Tesla", #drives a tesla model s
         car_model == "Model S", 
         height %in% c(65:67), #height is in this range
         event_name == "SQL Symphony Concert", #went to this concert in December 2017
         month(date, label = TRUE) == "Dec",
         year(date) == 2017) |>
  add_count(id) |> #Count each person who went to the concert 
  filter(n == 3) |> #Employer went 3 times
  select(name, annual_income) |> #verify for high income
  distinct()
```

-   Example of function formatting

```{r}
#| label: r-2-3

```

**R-3: I can write robust programs that are resistant to changes in inputs.**

-   Example (any context)

```{r}
#| label: r-3-example
#Lab 4 Question 7
ca_childcare |>
  pivot_longer(
    cols = c(mc_infant, mc_toddler, mc_preschool),
    names_to = "age_group",
    values_to = "cost") |>
  mutate(
    age_group = fct(age_group, levels = c("mc_infant", "mc_toddler", "mc_preschool")),
    age_group = fct_collapse(.f = age_group,
                              "Infant" = "mc_infant",
                              "Toddler" = "mc_toddler",
                              "Preschool" = "mc_preschool"),
    census_region = fct_reorder2(
      .f = census_region,
      .x = study_year,
      .y = cost )) |>
  ggplot(mapping = aes(x = study_year,
                       y = cost, 
                       color = census_region)) +
    geom_point() +
    geom_smooth(method = "loess") +
    facet_wrap(~ age_group, ncol = 3) +
  scale_y_continuous(
      limits = c(100, 500),
      breaks = seq(100, 500, by = 100)) +
  scale_x_continuous(
    limits = c(2008, 2018),
    breaks = seq(2008, 2018, by = 2)) +
  labs(title = "Weekly Median Price for Center-Based Childcare ($)",
       x = "Study Year",
       y = NULL) +
  theme_bw() +
  theme(panel.spacing =  grid::unit(10, "pt"),
        axis.text.x = element_text(size = 6))
```

-   Example (function stops)

```{r}
#| label: r-3-function-stops

```

## Data Visualization & Summarization

**DVS-1: I can create visualizations for a *variety* of variable types (e.g., numeric, character, factor, date)**

-   At least two numeric variables

```{r}
#| label: dvs-1-num
#Lab 4 Question 8
ca_childcare |>
  ggplot(mapping = aes(x = mhi_2018, y = mfcc_infant)) +
  geom_point() + 
  geom_smooth(method = "lm") +
  theme_light() +
  labs(x = "Median Household Income (2018 Dollars)",
       y = NULL,
       title = "Median Weekly Full-Time Center Based Childcare for Infants")

```

-   At least one numeric variable and one categorical variable

```{r}
#| label: dvs-2-num-cat
#Lab 2 Question 16 - revised
ggplot(data = surveys,
    mapping = aes(y = species, x = weight)) +
  geom_boxplot(outliers = FALSE) +
  geom_jitter(color = "steelblue", alpha = 0.3) +
  labs(x = "Weight (g)", y = "Species") +
  theme(panel.border = element_rect(color = "steelblue", fill = NA),
        axis.title.y = element_text(margin = margin(t = 0, b = 0, r = 15, l = 0)),
        axis.text.y = element_text(margin = margin(t= 0, b = 0, r = 10, l = 0)),
        axis.title.x = element_text(margin = margin(t = 5, b = 0, r = 0, l = 0)))
```

-   At least two categorical variables

```{r}
#| label: dvs-2-cat
# Challenge 3 Question 2 - revised
ggplot(data = teacher_evals_compare, 
       mapping = aes(x = sen_level, fill = SET_level)) +
  geom_bar(position = "fill") +
  geom_text(
    aes(label = scales::percent(after_stat(prop), accuracy = 1),
        group = SET_level),
    stat = "count",
    position = position_fill(vjust = 0.5),
    color = "white") +
  scale_y_continuous(labels = scales::label_percent()) +
  labs(x = "Years of Experience",
       y = NULL,
       fill = "Evaluation Rating",
       title = "Evaluation of Teachers' Use of Activities") +
  theme_light() +
  theme(legend.position = "top") +
  scale_fill_brewer(palette = "Set1")
```

-   Dates (time series plot)

```{r}
#| label: dvs-2-date
#Challenge 4 - Revised
ca_childcare |>
  ggplot(mapping = aes(x = study_year,
                       y = price)) +
  geom_point(show.legend = FALSE) +
  geom_smooth(method = "lm",
              fill = "dodgerblue3",
              show.legend = FALSE,
              color = "coral2") +
  facet_wrap(~ care_type, ncol = 2) +
  scale_x_continuous(limits = c(2008, 2018),
                     breaks = seq(2008, 2018, by = 2)) +
  labs(x = "Study Year",
       y = NULL,
       subtitle = "Median Price of Childcare",
       title = "Median Weekly Price of Family Childcare vs. Center-based Childcare in CA") +
  theme_bw() +
  theme(panel.grid.major = element_line(color = "gray45"),
        panel.grid.minor = element_line(color = "gray70"),
        panel.background = element_rect(fill = "lightsteelblue2"),
        strip.background = element_rect(fill = "pink"))
```

**DVS-2: I use plot modifications to make my visualization clear to the reader.**

-   I can modify my plot theme to be more readable

```{r}
#| label: dvs-2-ex-1
#Lab 4 Question 7 - Revised
ca_childcare |>
  pivot_longer(
    cols = c(mc_infant, mc_toddler, mc_preschool),
    names_to = "age_group",
    values_to = "cost") |>
  mutate(
    age_group = fct(age_group, levels = c("mc_infant", "mc_toddler", "mc_preschool")),
    age_group = fct_collapse(.f = age_group,
                              "Infant" = "mc_infant",
                              "Toddler" = "mc_toddler",
                              "Preschool" = "mc_preschool"),
    census_region = fct_reorder2(
      .f = census_region,
      .x = study_year,
      .y = cost )) |>
  ggplot(mapping = aes(x = study_year,
                       y = cost, 
                       color = census_region)) +
    geom_point() +
    geom_smooth(method = "loess") +
    facet_wrap(~ age_group, ncol = 3) +
  scale_y_continuous(
      limits = c(100, 500),
      breaks = seq(100, 500, by = 100)) +
  scale_x_continuous(
    limits = c(2008, 2018),
    breaks = seq(2008, 2018, by = 2)) +
  labs(title = "Weekly Median Price for Center-Based Childcare ($)",
       x = "Study Year",
       y = NULL) +
  theme_bw() +
  theme(panel.spacing =  grid::unit(10, "pt"),
        axis.text.x = element_text(size = 6))
```

-   I can modify my colors to be accessible to anyone's eyes

```{r}
#| label: dvs-2-ex-2
#Challenge 4 - Revised
ca_childcare |>
  ggplot(mapping = aes(x = study_year,
                       y = price)) +
  geom_point(show.legend = FALSE) +
  geom_smooth(method = "lm",
              fill = "dodgerblue3",
              show.legend = FALSE,
              color = "coral2") +
  facet_wrap(~ care_type, ncol = 2) +
  scale_x_continuous(limits = c(2008, 2018),
                     breaks = seq(2008, 2018, by = 2)) +
  labs(x = "Study Year",
       y = NULL,
       subtitle = "Median Price of Childcare",
       title = "Median Weekly Price of Family Childcare vs. Center-based Childcare in CA") +
  theme_bw() +
  theme(panel.grid.major = element_line(color = "gray45"),
        panel.grid.minor = element_line(color = "gray70"),
        panel.background = element_rect(fill = "lightsteelblue2"),
        strip.background = element_rect(fill = "pink"))

```

-   I can modify my plot titles to clearly communicate the data context

```{r}
#| label: dvs-2-ex-3
#Lab 4 Question 7 - Revised
ca_childcare |>
  pivot_longer(
    cols = c(mc_infant, mc_toddler, mc_preschool),
    names_to = "age_group",
    values_to = "cost") |>
  mutate(
    age_group = fct(age_group, levels = c("mc_infant", "mc_toddler", "mc_preschool")),
    age_group = fct_collapse(.f = age_group,
                              "Infant" = "mc_infant",
                              "Toddler" = "mc_toddler",
                              "Preschool" = "mc_preschool"),
    census_region = fct_reorder2(
      .f = census_region,
      .x = study_year,
      .y = cost )) |>
  ggplot(mapping = aes(x = study_year,
                       y = cost, 
                       color = census_region)) +
    geom_point() +
    geom_smooth(method = "loess") +
    facet_wrap(~ age_group, ncol = 3) +
  scale_y_continuous(
      limits = c(100, 500),
      breaks = seq(100, 500, by = 100)) +
  scale_x_continuous(
    limits = c(2008, 2018),
    breaks = seq(2008, 2018, by = 2)) +
  labs(title = "Weekly Median Price for Center-Based Childcare ($)",
       x = "Study Year",
       y = NULL) +
  theme_bw() +
  theme(panel.spacing =  grid::unit(10, "pt"),
        axis.text.x = element_text(size = 6))
```

-   I can modify the text in my plot to be more readable

```{r}
#| label: dvs-2-ex-4
#Lab 4 Question 7 - Revised
ca_childcare |>
  pivot_longer(
    cols = c(mc_infant, mc_toddler, mc_preschool),
    names_to = "age_group",
    values_to = "cost") |>
  mutate(
    age_group = fct(age_group, levels = c("mc_infant", "mc_toddler", "mc_preschool")),
    age_group = fct_collapse(.f = age_group,
                              "Infant" = "mc_infant",
                              "Toddler" = "mc_toddler",
                              "Preschool" = "mc_preschool"),
    census_region = fct_reorder2(
      .f = census_region,
      .x = study_year,
      .y = cost )) |>
  ggplot(mapping = aes(x = study_year,
                       y = cost, 
                       color = census_region)) +
    geom_point() +
    geom_smooth(method = "loess") +
    facet_wrap(~ age_group, ncol = 3) +
  scale_y_continuous(
      limits = c(100, 500),
      breaks = seq(100, 500, by = 100)) +
  scale_x_continuous(
    limits = c(2008, 2018),
    breaks = seq(2008, 2018, by = 2)) +
  labs(title = "Weekly Median Price for Center-Based Childcare ($)",
       x = "Study Year",
       y = NULL) +
  theme_bw() +
  theme(panel.spacing =  grid::unit(10, "pt"),
        axis.text.x = element_text(size = 6))
```

-   I can reorder my legend to align with the colors in my plot

```{r}
#| label: dvs-2-ex-5
#Lab 4 Question 7 - Revised
ca_childcare |>
  pivot_longer(
    cols = c(mc_infant, mc_toddler, mc_preschool),
    names_to = "age_group",
    values_to = "cost") |>
  mutate(
    age_group = fct(age_group, levels = c("mc_infant", "mc_toddler", "mc_preschool")),
    age_group = fct_collapse(.f = age_group,
                              "Infant" = "mc_infant",
                              "Toddler" = "mc_toddler",
                              "Preschool" = "mc_preschool"),
    census_region = fct_reorder2(
      .f = census_region,
      .x = study_year,
      .y = cost )) |>
  ggplot(mapping = aes(x = study_year,
                       y = cost, 
                       color = census_region)) +
    geom_point() +
    geom_smooth(method = "loess") +
    facet_wrap(~ age_group, ncol = 3) +
  scale_y_continuous(
      limits = c(100, 500),
      breaks = seq(100, 500, by = 100)) +
  scale_x_continuous(
    limits = c(2008, 2018),
    breaks = seq(2008, 2018, by = 2)) +
  labs(title = "Weekly Median Price for Center-Based Childcare ($)",
       x = "Study Year",
       y = NULL) +
  theme_bw() +
  theme(panel.spacing =  grid::unit(10, "pt"),
        axis.text.x = element_text(size = 6))
```

**DVS-3: I show creativity in my visualizations**

-   I can use non-standard colors (Example 1)

```{r}
#| label: dvs-3-1-ex-1
#Challenge 4 - Revised
ca_childcare |>
  ggplot(mapping = aes(x = study_year,
                       y = price)) +
  geom_point(show.legend = FALSE) +
  geom_smooth(method = "lm",
              fill = "dodgerblue3",
              show.legend = FALSE,
              color = "coral2") +
  facet_wrap(~ care_type, ncol = 2) +
  scale_x_continuous(limits = c(2008, 2018),
                     breaks = seq(2008, 2018, by = 2)) +
  labs(x = "Study Year",
       y = NULL,
       subtitle = "Median Price of Childcare",
       title = "Median Weekly Price of Family Childcare vs. Center-based Childcare in CA") +
  theme_bw() +
  theme(panel.grid.major = element_line(color = "gray45"),
        panel.grid.minor = element_line(color = "gray70"),
        panel.background = element_rect(fill = "lightsteelblue2"),
        strip.background = element_rect(fill = "pink"))

```

-   I can use non-standard colors (Example 2)

```{r}
#| label: dvs-3-1-ex-2
# Challenge 3 Question 2 - revised to fit requirement
ggplot(data = teacher_evals_compare, 
       mapping = aes(x = sen_level, fill = SET_level)) +
  geom_bar(position = "fill") +
  geom_text(
    aes(label = scales::percent(after_stat(prop), accuracy = 1),
        group = SET_level),
    stat = "count",
    position = position_fill(vjust = 0.5),
    color = "white") +
  scale_y_continuous(labels = scales::label_percent()) +
  labs(x = "Years of Experience",
       y = NULL,
       fill = "Evaluation Rating",
       title = "Evaluation of Teachers' Use of Activities") +
  theme_light() +
  theme(legend.position = "top") +
  scale_fill_brewer(palette = "Set1")
```

-   I can use annotations (e.g., `geom_text()`)

```{r}
#| label: dvs-3-2
# Challenge 3 Question 2 - revised to fit requirement
ggplot(data = teacher_evals_compare, 
       mapping = aes(x = sen_level, fill = SET_level)) +
  geom_bar(position = "fill") +
  geom_text(
    aes(label = scales::percent(after_stat(prop), accuracy = 1),
        group = SET_level),
    stat = "count",
    position = position_fill(vjust = 0.5),
    color = "white") +
  scale_y_continuous(labels = scales::label_percent()) +
  labs(x = "Years of Experience",
       y = NULL,
       fill = "Evaluation Rating",
       title = "Evaluation of Teachers' Use of Activities") +
  theme_light() +
  theme(legend.position = "top") +
  scale_fill_brewer(palette = "Set1")
```

-   I can choose creative geometries (e.g., `geom_segment()`, `geom_ribbon)()`)

```{r}
#| label: dvs-3-3

```

**DVS-4: I can calculate numerical summaries of variables.**

-   Example using `summarize()`

```{r}
#| label: dvs-4-summarize
#Lab 4 Question 5 - revised 
ca_childcare |> 
  group_by(census_region, study_year) |>
  summarise(median_mhi_2018 = median(mhi_2018),
            .groups = "drop") |>
  filter(study_year %in% c(2008, 2018)) |>
  pivot_wider(names_from = study_year,
              values_from = median_mhi_2018) |>
  rename("median_household_income_2008" = `2008`,
         "median_household_income_2018" = `2018`) |>
  arrange(desc("median_household_income_2018"))
```

-   Example using `across()`

```{r}
#| label: dvs-4-across
#Lab 3 Question 8
teacher_evals_clean |>
  filter(if_any(everything(),  is.na)) |> #everything() checks all columns
  select(ends_with("id"), everything())
```

**DVS-5: I can find summaries of variables across multiple groups.**

-   Example 1

```{r}
#| label: dvs-5-1
#Lab 3 Question 9
teacher_evals_clean |>
  group_by(teacher_id, course_id) |>
  summarize(n_questions = n_distinct(question_no), .groups = "drop") |>
  #at this point each teacher course combo has their question count
  filter(n_questions == 9) |>
  count()
```

-   Example 2

```{r}
#| label: dvs-5-2
#Lab 4 Question 5 - revised
ca_childcare |> 
  group_by(census_region, study_year) |>
  summarise(median_mhi_2018 = median(mhi_2018),
            .groups = "drop") |>
  filter(study_year %in% c(2008, 2018)) |>
  pivot_wider(names_from = study_year,
              values_from = median_mhi_2018) |>
  rename("median_household_income_2008" = `2008`,
         "median_household_income_2018" = `2018`) |>
  arrange(desc("median_household_income_2018"))
```

**DVS-6: I can create tables which make my summaries clear to the reader.**

-   I can modify my column names to clearly communicate the data context

```{r}
#| label: dvs-6-ex-1
#Lab 4 Question 5 - revised 
ca_childcare |> 
  group_by(census_region, study_year) |>
  summarise(median_mhi_2018 = median(mhi_2018),
            .groups = "drop") |>
  filter(study_year %in% c(2008, 2018)) |>
  pivot_wider(names_from = study_year,
              values_from = median_mhi_2018) |>
  rename("median_household_income_2008" = `2008`,
         "median_household_income_2018" = `2018`) |>
  arrange(desc("median_household_income_2018"))
```

-   I can modify the text in my table to be more readable (e.g., bold face for column headers)

```{r}
#| label: dvs-6-ex-2

```

-   I can arrange my table to have an intuitive ordering

```{r}
#| label: dvs-6-ex-3
#Lab 4 Question 5 - revised
ca_childcare |> 
  group_by(census_region, study_year) |>
  summarise(median_mhi_2018 = median(mhi_2018),
            .groups = "drop") |>
  filter(study_year %in% c(2008, 2018)) |>
  pivot_wider(names_from = study_year,
              values_from = median_mhi_2018) |>
  rename("median_household_income_2008" = `2008`,
         "median_household_income_2018" = `2018`) |>
  arrange(desc("median_household_income_2018"))
```

**DVS-7: I show creativity in my tables.**

-   I can use non-default colors

```{r}
#| label: dvs-7-ex-1

```

-   I can modify the layout of my table to be more readable (e.g., `pivot_longer()` or `pivot_wider()`)

```{r}
#| label: dvs-7-ex-2

```

## Program Efficiency

**PE-1: I can write concise code which does not repeat itself.**

-   using a single function call with multiple inputs (rather than multiple function calls)

```{r}
#| label: pe-1-one-call
#Lab 5 Clue #3
new_suspect <- person |> 
  left_join(y = drivers_license,
            join_by(license_id == id)) |>
  left_join(y = income,
            join_by(ssn)) |>
  left_join(y = facebook_event_checkin, 
            join_by(id == person_id)) |> #combined necessary data into one table
  mutate(date = ymd(date)) |> #Convert date to a date type
  filter(gender == "female", #employer is female
         hair_color == "red", # red hair
         car_make == "Tesla", #drives a tesla model s
         car_model == "Model S", 
         height %in% c(65:67), #height is in this range
         event_name == "SQL Symphony Concert", #went to this concert in December 2017
         month(date, label = TRUE) == "Dec",
         year(date) == 2017) |>
  add_count(id) |> #Count each person who went to the concert 
  filter(n == 3) |> #Employer went 3 times
  select(name, id, annual_income) |> #verify for high income
  distinct()
```

-   using `across()`

```{r}
#| label: pe-1-across
#Lab 3 Question 8
teacher_evals_clean |>
  filter(if_any(everything(),  is.na)) |> #everything() checks all columns
  select(ends_with("id"), everything())
```

-   using functions from the `map()` family

```{r}
#| label: pe-1-map-1

```

**PE-2: I can write functions to reduce repetition in my code.**

-   Example 1: Function that operates on vectors

```{r}
#| label: pe-2-1

```

-   Example 2: Function that operates on data frames

```{r}
#| label: pe-2-2

```

-   Example 3: Function that operates on vectors *or* data frames

```{r}
#| label: pe-2-3

```

**PE-3:I can use iteration to reduce repetition in my code.**

-   using `across()`

```{r}
#| label: pe-3-across
#Lab 3 Question 8
teacher_evals_clean |>
  filter(if_any(everything(),  is.na)) |> #everything() checks all columns
  select(ends_with("id"), everything())
```

-   using a `map()` function with **one** input (e.g., `map()`, `map_chr()`, `map_dbl()`, etc.)

```{r}
#| label: pe-3-map-1

```

-   using a `map()` function with **more than one** input (e.g., `map_2()` or `pmap()`)

```{r}
#| label: pe-3-map-2

```

**PE-4: I can use modern tools when carrying out my analysis.**

-   I can use functions which are not superseded or deprecated

```{r}
#| label: pe-4-1
#Lab 4 Question 7 - Revised (Originally used recode() to modify the column names which is superseded, revised it to use fct_collapse() instead)
ca_childcare |>
  pivot_longer(
    cols = c(mc_infant, mc_toddler, mc_preschool),
    names_to = "age_group",
    values_to = "cost") |>
  mutate(
    age_group = fct(age_group, levels = c("mc_infant", "mc_toddler", "mc_preschool")),
    age_group = fct_collapse(.f = age_group,
                              "Infant" = "mc_infant",
                              "Toddler" = "mc_toddler",
                              "Preschool" = "mc_preschool"),
    census_region = fct_reorder2(
      .f = census_region,
      .x = study_year,
      .y = cost )) |>
  ggplot(mapping = aes(x = study_year,
                       y = cost, 
                       color = census_region)) +
    geom_point() +
    geom_smooth(method = "loess") +
    facet_wrap(~ age_group, ncol = 3) +
  scale_y_continuous(
      limits = c(100, 500),
      breaks = seq(100, 500, by = 100)) +
  scale_x_continuous(
    limits = c(2008, 2018),
    breaks = seq(2008, 2018, by = 2)) +
  labs(title = "Weekly Median Price for Center-Based Childcare ($)",
       x = "Study Year",
       y = NULL) +
  theme_bw() +
  theme(panel.spacing =  grid::unit(10, "pt"),
        axis.text.x = element_text(size = 6))
```

-   I can connect a data wrangling pipeline into a `ggplot()`

```{r}
#| label: pe-4-2
#Lab 4 Question 7 - Revised
ca_childcare |>
  pivot_longer(
    cols = c(mc_infant, mc_toddler, mc_preschool),
    names_to = "age_group",
    values_to = "cost") |>
  mutate(
    age_group = fct(age_group, levels = c("mc_infant", "mc_toddler", "mc_preschool")),
    age_group = fct_collapse(.f = age_group,
                              "Infant" = "mc_infant",
                              "Toddler" = "mc_toddler",
                              "Preschool" = "mc_preschool"),
    census_region = fct_reorder2(
      .f = census_region,
      .x = study_year,
      .y = cost )) |>
  ggplot(mapping = aes(x = study_year,
                       y = cost, 
                       color = census_region)) +
    geom_point() +
    geom_smooth(method = "loess") +
    facet_wrap(~ age_group, ncol = 3) +
  scale_y_continuous(
      limits = c(100, 500),
      breaks = seq(100, 500, by = 100)) +
  scale_x_continuous(
    limits = c(2008, 2018),
    breaks = seq(2008, 2018, by = 2)) +
  labs(title = "Weekly Median Price for Center-Based Childcare ($)",
       x = "Study Year",
       y = NULL) +
  theme_bw() +
  theme(panel.spacing =  grid::unit(10, "pt"),
        axis.text.x = element_text(size = 6))
```

## Data Simulation & Statisical Models

**DSSM-1: I can simulate data from a *variety* of probability models.**

-   Example 1

```{r}
#| label: dsm-1-1

```

-   Example 2

```{r}
#| label: dsm-1-2

```

**DSSM-2: I can conduct common statistical analyses in R.**

-   Example 1

```{r}
#| label: dsm-2-1
#Lab 4 Question 9 - 11
reg_mod1 <- lm(mfcc_infant ~ mhi_2018, data = ca_childcare)
summary(reg_mod1)

#Since the p-value returned by the function is less than 0.05 (< 2.2e-16), it means that the data is statistically significant. This tells us that there is a relationship between the median household income and the median weekly cost of center-based childcare for infants.
```

-   Example 2

```{r}
#| label: dsm-2-2
#Challenge 3 Question 4 
table(teacher_evals_compare$SET_level, teacher_evals_compare$sen_level) |>
  chisq.test()
#Since the p-value < 0.05, there is statistical significant evidence that there is a relationship between the SET_levels on question 3 and seniority of the teachers at the 95% confidence interval.
```

-   Example 3

```{r}
#| label: dsm-2-3

```

## Revising My Thinking

<!-- How did you revise your thinking throughout the course? How did you revise your thinking on the code examples you have provided in your portfolio? -->

<!-- For the revisions included in your Portfolio, to help me understand the nature of your revisions, please denote somehow the feedback I provided you (e.g., boldface, italics, colored text) before your revisions. -->

## Extending My Thinking

<!-- How did you extended your thinking throughout the course? How did you extend your thinking on the code examples you have provided in your portfolio? -->

## Peer Support & Collaboration

<!-- Include an image or a description of feedback you gave that you are proud of (either in a peer review or in Discord). -->

<!-- Include a description of how you grew as a collaborator through the weekly pair programming activities.   -->
